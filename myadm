#!/usr/bin/python
from __future__ import print_function
import sys
sys.path.insert(0, '/data/mysqladm2/')
from flask import Flask, g
from flask.ext.script import Manager
from mysqladm.fapp import WrapFlask
import mysqladm.servers
import mysqladm.core
import requests

app = WrapFlask(__name__)
manager = Manager(app,with_default_commands=False)

@manager.command
def sync(reconcile=False):
	"""
	Compares the list of databases between mysqladm and the mysqlagent and outputs differences. Use with -r/--reconcile to reconcile differences.
	"""

	g.db = mysqladm.core.db_connect()

	## Load servers
	servers = mysqladm.servers.get_servers()
	
	for server in servers:
		print('Checking server "' + server['hostname'] + '"')
		try:
			json_response = mysqladm.core.msg_node(server,'list')

			if 'status' not in json_response:
				print('Error: Invalid response from server', file=sys.stderr)
				continue

			if json_response['status'] != 0:
				if 'error' in json_response:
					print('Error from agent: ' + json_response['error'], file=sys.stderr)
					continue
				else:
					print('Error from agent, code: ' + json_response['code'], file=sys.stderr)
					continue

		except requests.exceptions.RequestException as e:
			print('Error contacting agent: ' + str(e), file=sys.stderr)
			continue
		
		databases = mysqladm.servers.get_server_databases(server['id'])
		dblist = []
		for db in databases:
			dblist.append(db['name'])

		## Check to see if any databases have been created without us knowing about it
		if 'list' in json_response:
			for instance in json_response['list']:
				if instance not in dblist:					
					if reconcile:
						mysqladm.databases.insert_database_record(server['id'], instance, 'N/A', 'N/A')
						print("\t" + 'Found unknown database "' + instance + '" on server. Added database to records as it exists on the server.')
					else:
						print("\t" + 'Found unknown database "' + instance + '" on server')
					
		## Check to see if any databases appear to have been deleted without us knowing about it
		for db in databases:
			if db['name'] not in json_response['list']:
				if reconcile:
					mysqladm.databases.delete_database_record(db['id'])
					print("\t" + 'Could not find database "' + db['name'] + '" on server. Deleted database from records as it no longer exists.')
				else:
					print("\t" + 'Could not find database "' + db['name'] + '" on server')
		
@manager.command
def servers():
	"""
	List servers managed by mysqladm
	"""
	g.db = mysqladm.core.db_connect()

	## Load servers
	rows = mysqladm.servers.get_servers()
	
	for row in rows:
		print(row['hostname'])
		
@manager.command
def databases():
	"""
	List databases managed by mysqladm
	"""
	g.db = mysqladm.core.db_connect()

	## Load servers
	rows = mysqladm.databases.get_all_databases(cmd_line=True)
	
	for row in rows:
		print(row['shortserver'] + '/' + row['name'])
		
#@manager.command
#def initsetup():
#	"""
#	Runs the initial setup code to create the database and set up mysqladm
#	"""
#	print("Function not implemented (yet)")
    
if __name__ == "__main__":
	manager.run()
