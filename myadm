#!/usr/bin/python
from __future__ import print_function
import sys
sys.path.insert(0, '/data/mysqladm2/')
from flask import Flask, g
from flask.ext.script import Manager
from mysqladm.fapp import WrapFlask
import mysqladm.servers
import mysqladm.core
import requests

app = WrapFlask(__name__)
manager = Manager(app,with_default_commands=False)

@manager.command
@manager.option('-s', '--server', help='What server to sync from, default all',required=False)
def agentsync(server=''):
	"""
	Compares the list of databases between mysqladm and the mysqlagent and corrects differences
	"""
	g.db = mysqladm.core.db_connect()

	## Load servers
	servers = mysqladm.servers.get_all_servers()
	
	for server in servers:
		print(server['hostname'])
		try:
			json_response = mysqladm.core.msg_node(server['hostname'],server['password'],'list')

			if 'status' not in json_response:
				print('Error: Invalid JSON response from server', file=sys.stderr)
				continue

			if json_response['status'] != 0:
				if 'error' in json_response:
					print('Error from agent: ' + json_response['error'], file=sys.stderr)
					continue
				else:
					print('Error from agent, code: ' + json_response['code'], file=sys.stderr)
					continue

		except requests.exceptions.RequestException as e:
			print('Error contacting agent: ' + str(e), file=sys.stderr)
			continue
		
		databases = mysqladm.servers.get_server_databases(server['id'])
		dblist = []
		for db in databases:
			dblist.append(db['name'])

		## Check to see if any databases have been created without us knowing about it
		if 'list' in json_response:
			for instance in json_response['list']:
				if instance not in dblist:
					print("\t" + 'db: ' + instance + ' not found in records, but was on server')
					#cur.execute('INSERT INTO `databases` (`server`, `name`, `owner`, `description`) VALUES (%s, %s, %s, %s)', (server_id,instance,'N/A','N/A'))
					#g.db.commit()
					
		## Check to see if any databases appear to have been deleted without us knowing about it
		for db in dblist:
			if db not in json_response['list']:
				print("\t" + 'db: ' + db + ' found in records, but was NOT on server')
				# delete record
				# d.db.commit()
		
@manager.command
def listservers():
	"""
	List servers managed by mysqladm
	"""
	g.db = mysqladm.core.db_connect()

	## Load servers
	rows = mysqladm.servers.get_all_servers()
	
	for row in rows:
		print(row['hostname'])
		
@manager.command
def initsetup():
	"""
	Runs the initial setup code to create the database and set up mysqladm
	"""
	print("Function not implemented (yet)")
    
if __name__ == "__main__":
	manager.run()
